package kirjasto.test;
// Generated by ComTest BEGIN
import java.io.*;
import java.util.*;
import static org.junit.Assert.*;
import org.junit.*;
import kirjasto.*;
// Generated by ComTest END

/**
 * Test class made by ComTest
 * @version 2020.04.19 13:08:13 // Generated by ComTest
 *
 */
@SuppressWarnings({ "all" })
public class KirjakokoelmaTest {



  // Generated by ComTest BEGIN
  /** 
   * testLisaa73 
   * @throws SailoException when error
   */
  @Test
  public void testLisaa73() throws SailoException {    // Kirjakokoelma: 73
    Kirjakokoelma kirjakokoelma = new Kirjakokoelma(); 
    Kirja kirja1 = new Kirja(), kirja2 = new Kirja(); 
    kirja1.rekisteroi(); kirja2.rekisteroi(); 
    assertEquals("From: Kirjakokoelma line: 78", 0, kirjakokoelma.getKirjat()); 
    kirjakokoelma.lisaa(kirja1); assertEquals("From: Kirjakokoelma line: 79", 1, kirjakokoelma.getKirjat()); 
    kirjakokoelma.lisaa(kirja2); 
    assertEquals("From: Kirjakokoelma line: 81", 2, kirjakokoelma.getKirjat()); 
    assertEquals("From: Kirjakokoelma line: 82", kirja1, kirjakokoelma.annaKirja(0)); 
    assertEquals("From: Kirjakokoelma line: 83", kirja2, kirjakokoelma.annaKirja(1)); 
    try {
    assertEquals("From: Kirjakokoelma line: 84", kirja1, kirjakokoelma.annaKirja(3)); 
    fail("Kirjakokoelma: 84 Did not throw IndexOutOfBoundsException");
    } catch(IndexOutOfBoundsException _e_){ _e_.getMessage(); }
    kirjakokoelma.lisaa(kirja1); 
    kirjakokoelma.lisaa(kirja1); 
    kirjakokoelma.lisaa(kirja1); 
    kirjakokoelma.lisaa(kirja1); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testLueTiedostosta167 
   * @throws SailoException when error
   */
  @Test
  public void testLueTiedostosta167() throws SailoException {    // Kirjakokoelma: 167
    Kirjakokoelma kirjakokoelma = new Kirjakokoelma(); 
    Kirja kafka = new Kirja(); kafka.vastaaKafkaRannalla(); kafka.rekisteroi(); 
    Kirja kafka1 = new Kirja(); kafka1.vastaaKafkaRannalla(); kafka1.rekisteroi(); 
    Kirjailija haru = new Kirjailija(); haru.vastaaHarukiMurakami(kafka.getId(), "Haruki Murakami"); 
    Kirjailija haru1 = new Kirjailija(); haru1.vastaaHarukiMurakami(kafka1.getId(), "Haruki Murakami"); 
    String hakemisto = "testikirjat"; 
    File dir = new File(hakemisto); 
    File ftied  = new File(hakemisto+"/kirjat.dat"); 
    File fhtied = new File(hakemisto+"/kirjailijat.dat"); 
    dir.mkdir(); 
    ftied.delete(); 
    fhtied.delete(); 
    try {
    kirjakokoelma.lueTiedostosta(hakemisto); 
    fail("Kirjakokoelma: 188 Did not throw SailoException");
    } catch(SailoException _e_){ _e_.getMessage(); }
    kirjakokoelma.lisaa(kafka); 
    kirjakokoelma.lisaa(kafka1); 
    kirjakokoelma.lisaa(haru); 
    kirjakokoelma.lisaa(haru1); 
    kirjakokoelma.tallenna(); 
    kirjakokoelma = new Kirjakokoelma(); 
    kirjakokoelma.lueTiedostosta(hakemisto); 
    Collection<Kirja> kaikki = kirjakokoelma.etsi("",-1); 
    Iterator<Kirja> it = kaikki.iterator(); 
    assertEquals("From: Kirjakokoelma line: 200", kafka, it.next()); 
    assertEquals("From: Kirjakokoelma line: 201", kafka1, it.next()); 
    assertEquals("From: Kirjakokoelma line: 202", false, it.hasNext()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testKirjailijanKirjat253 
   * @throws CloneNotSupportedException when error
   * @throws SailoException when error
   */
  @Test
  public void testKirjailijanKirjat253() throws CloneNotSupportedException, SailoException {    // Kirjakokoelma: 253
    Kirjakokoelma kirjakokoelma = new Kirjakokoelma(); 
    Kirja k1 = new Kirja(); 
    k1.rekisteroi(); 
    k1.setKirjailijaId(2); 
    kirjakokoelma.lisaa(k1); 
    Collection<Kirja> loytyneet = kirjakokoelma.kirjailijanKirjat(2, 1); 
    assertEquals("From: Kirjakokoelma line: 261", 1, loytyneet.size()); 
    Iterator<Kirja> it = loytyneet.iterator(); 
    assertEquals("From: Kirjakokoelma line: 263", true, it.next() == k1); 
  } // Generated by ComTest END
}