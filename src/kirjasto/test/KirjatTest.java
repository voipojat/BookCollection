package kirjasto.test;
// Generated by ComTest BEGIN
import java.io.File;
import java.io.*;
import java.util.*;
import kirjasto.*;
import static org.junit.Assert.*;
import org.junit.*;
// Generated by ComTest END

/**
 * Test class made by ComTest
 * @version 2020.04.01 22:12:29 // Generated by ComTest
 *
 */
@SuppressWarnings({ "all" })
public class KirjatTest {



  // Generated by ComTest BEGIN
  /** 
   * testLisaa42 
   * @throws SailoException when error
   */
  @Test
  public void testLisaa42() throws SailoException {    // Kirjat: 42
    Kirjat kirjat = new Kirjat(); 
    Kirja kirja1 = new Kirja(), kirja2 = new Kirja(); 
    assertEquals("From: Kirjat line: 46", 0, kirjat.getLkm()); 
    kirjat.lisaa(kirja1); 
    kirjat.lisaa(kirja2); assertEquals("From: Kirjat line: 48", 2, kirjat.getLkm()); 
    assertEquals("From: Kirjat line: 49", kirja1, kirjat.anna(0)); 
    assertEquals("From: Kirjat line: 50", kirja2, kirjat.anna(1)); 
    try {
    assertEquals("From: Kirjat line: 51", kirja1, kirjat.anna(2)); 
    fail("Kirjat: 51 Did not throw IndexOutOfBoundsException");
    } catch(IndexOutOfBoundsException _e_){ _e_.getMessage(); }
    kirjat.lisaa(kirja1); 
    kirjat.lisaa(kirja1); 
    kirjat.lisaa(kirja1); 
    kirjat.lisaa(kirja1); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testLueTiedostosta127 
   * @throws SailoException when error
   */
  @Test
  public void testLueTiedostosta127() throws SailoException {    // Kirjat: 127
    Kirjat kirjat = new Kirjat(); 
    Kirja kafka = new Kirja(); kafka.vastaaKafkaRannalla(); 
    Kirja kafka1 = new Kirja(); kafka1.vastaaKafkaRannalla(); 
    String hakemisto = "testikirjat"; 
    String tiedNimi = hakemisto+"/kirjat"; 
    File ftied = new File(tiedNimi+".dat"); 
    File dir = new File(hakemisto); 
    dir.mkdir(); 
    ftied.delete(); 
    try {
    kirjat.lueTiedostosta(tiedNimi); 
    fail("Kirjat: 144 Did not throw SailoException");
    } catch(SailoException _e_){ _e_.getMessage(); }
    kirjat.lisaa(kafka); 
    kirjat.lisaa(kafka1); 
    kirjat.tallenna(); 
    kirjat = new Kirjat();  // Poistetaan vanhat luomalla uusi
    kirjat.lueTiedostosta(tiedNimi);  // johon ladataan tiedot tiedostosta.
    Iterator<Kirja> i = kirjat.iterator(); 
    assertEquals("From: Kirjat line: 151", kafka, i.next()); 
    assertEquals("From: Kirjat line: 152", kafka1, i.next()); 
    assertEquals("From: Kirjat line: 153", false, i.hasNext()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testKirjatIterator231 
   * @throws SailoException when error
   */
  @Test
  public void testKirjatIterator231() throws SailoException {    // Kirjat: 231
    Kirjat kirjat = new Kirjat(); 
    Kirja kafka = new Kirja(), kafka1 = new Kirja(); 
    kafka.rekisteroi(); kafka1.rekisteroi(); 
    kirjat.lisaa(kafka); 
    kirjat.lisaa(kafka1); 
    String tulos = " " + kafka.getId() + " " + kafka1.getId(); 
    StringBuffer ids = new StringBuffer(30); 
    for (Iterator<Kirja>  i=kirjat.iterator(); i.hasNext(); ) {
    Kirja kirja = i.next(); 
    ids.append(" "+kirja.getId()); 
    }
    assertEquals("From: Kirjat line: 251", tulos, ids.toString()); 
    Iterator<Kirja>  i=kirjat.iterator(); 
    assertEquals("From: Kirjat line: 254", true, i.next() == kafka); 
    assertEquals("From: Kirjat line: 255", true, i.next() == kafka1); 
    try {
    i.next(); 
    fail("Kirjat: 257 Did not throw NoSuchElementException");
    } catch(NoSuchElementException _e_){ _e_.getMessage(); }
  } // Generated by ComTest END
}